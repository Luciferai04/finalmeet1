name: CI/CD Pipeline - Real-Time Translator

on:
 push:
 branches: [ main, develop ]
 pull_request:
 branches: [ main ]
 release:
 types: [ published ]

env:
 DOCKER_REGISTRY: ghcr.io
 IMAGE_NAME: real-time-translator
 PYTHON_VERSION: "3.11"

jobs:
 # Code Quality and Security Checks
 quality-checks:
 name: Code Quality & Security
 runs-on: ubuntu-latest
 
 steps:
 - name: Checkout Code
 uses: actions/checkout@v4
 
 - name: Set up Python
 uses: actions/setup-python@v4
 with:
 python-version: ${{ env.PYTHON_VERSION }}
 
 - name: Cache pip dependencies
 uses: actions/cache@v3
 with:
 path: ~/.cache/pip
 key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
 restore-keys: |
 ${{ runner.os }}-pip-
 
 - name: Install dependencies
 run: |
 python -m pip install --upgrade pip
 pip install -r requirements_production.txt
 pip install bandit safety flake8 black isort pytest-cov
 
 - name: Code formatting check (Black)
 run: black --check --diff .
 continue-on-error: true
 
 - name: Import sorting check (isort)
 run: isort --check-only --diff .
 continue-on-error: true
 
 - name: Linting (Flake8)
 run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
 continue-on-error: true
 
 - name: Security scan (Bandit)
 run: bandit -r . -f json -o bandit-report.json
 continue-on-error: true
 
 - name: Dependency security check (Safety)
 run: safety check --json --output safety-report.json
 continue-on-error: true
 
 - name: Upload security reports
 uses: actions/upload-artifact@v3
 if: always()
 with:
 name: security-reports
 path: |
 bandit-report.json
 safety-report.json

 # Unit and Integration Tests
 test:
 name: Run Tests
 runs-on: ubuntu-latest
 needs: quality-checks
 
 strategy:
 matrix:
 python-version: ["3.11", "3.12"]
 
 steps:
 - name: Checkout Code
 uses: actions/checkout@v4
 
 - name: Set up Python ${{ matrix.python-version }}
 uses: actions/setup-python@v4
 with:
 python-version: ${{ matrix.python-version }}
 
 - name: Cache pip dependencies
 uses: actions/cache@v3
 with:
 path: ~/.cache/pip
 key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
 restore-keys: |
 ${{ runner.os }}-pip-${{ matrix.python-version }}-
 ${{ runner.os }}-pip-
 
 - name: Install system dependencies
 run: |
 sudo apt-get update
 sudo apt-get install -y ffmpeg portaudio19-dev
 
 - name: Install Python dependencies
 run: |
 python -m pip install --upgrade pip
 pip install -r requirements_production.txt
 pip install pytest pytest-asyncio pytest-cov pytest-mock
 
 - name: Download required models (cached)
 uses: actions/cache@v3
 with:
 path: |
 models/
 ~/.cache/huggingface/
 ~/.cache/torch/
 key: ${{ runner.os }}-models-${{ hashFiles('requirements*.txt') }}
 restore-keys: |
 ${{ runner.os }}-models-
 
 - name: Run topic analysis tests
 run: |
 python test_topic_analysis.py
 
 - name: Run core functionality tests
 run: |
 python -m pytest test_core_functionality.py -v --cov=src --cov-report=xml
 continue-on-error: true
 
 - name: Upload test results
 uses: actions/upload-artifact@v3
 if: always()
 with:
 name: test-results-py${{ matrix.python-version }}
 path: |
 coverage.xml
 pytest-report.xml

 # Docker Build and Security Scan
 docker-build:
 name: Docker Build & Security Scan
 runs-on: ubuntu-latest
 needs: test
 
 steps:
 - name: Checkout Code
 uses: actions/checkout@v4
 
 - name: Set up Docker Buildx
 uses: docker/setup-buildx-action@v3
 
 - name: Log in to Container Registry
 if: github.event_name != 'pull_request'
 uses: docker/login-action@v3
 with:
 registry: ${{ env.DOCKER_REGISTRY }}
 username: ${{ github.actor }}
 password: ${{ secrets.GITHUB_TOKEN }}
 
 - name: Extract metadata
 id: meta
 uses: docker/metadata-action@v5
 with:
 images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
 tags: |
 type=ref,event=branch
 type=ref,event=pr
 type=semver,pattern={{version}}
 type=semver,pattern={{major}}.{{minor}}
 type=raw,value=latest,enable={{is_default_branch}}
 
 - name: Build Docker image
 uses: docker/build-push-action@v5
 with:
 context: .
 push: ${{ github.event_name != 'pull_request' }}
 tags: ${{ steps.meta.outputs.tags }}
 labels: ${{ steps.meta.outputs.labels }}
 target: production
 cache-from: type=gha
 cache-to: type=gha,mode=max
 
 - name: Run Trivy vulnerability scanner
 uses: aquasecurity/trivy-action@master
 if: github.event_name != 'pull_request'
 with:
 image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
 format: 'sarif'
 output: 'trivy-results.sarif'
 
 - name: Upload Trivy scan results
 uses: github/codeql-action/upload-sarif@v2
 if: always() && github.event_name != 'pull_request'
 with:
 sarif_file: 'trivy-results.sarif'

 # Load Testing
 load-test:
 name: Load Testing
 runs-on: ubuntu-latest
 needs: docker-build
 if: github.ref == 'refs/heads/main' || github.event_name == 'release'
 
 steps:
 - name: Checkout Code
 uses: actions/checkout@v4
 
 - name: Set up Python
 uses: actions/setup-python@v4
 with:
 python-version: ${{ env.PYTHON_VERSION }}
 
 - name: Install load testing tools
 run: |
 python -m pip install --upgrade pip
 pip install locust requests pytest
 
 - name: Start application for testing
 run: |
 docker-compose -f docker-compose.prod.yml up -d
 sleep 60 # Wait for services to be ready
 
 - name: Wait for application to be ready
 run: |
 timeout 300 bash -c 'until curl -f http://localhost/health; do sleep 5; done'
 
 - name: Run load tests
 run: |
 python create_load_test.py
 
 - name: Stop application
 if: always()
 run: docker-compose -f docker-compose.prod.yml down
 
 - name: Upload load test results
 uses: actions/upload-artifact@v3
 if: always()
 with:
 name: load-test-results
 path: load-test-results.json

 # Staging Deployment
 deploy-staging:
 name: Deploy to Staging
 runs-on: ubuntu-latest
 needs: [test, docker-build]
 if: github.ref == 'refs/heads/develop'
 environment: staging
 
 steps:
 - name: Checkout Code
 uses: actions/checkout@v4
 
 - name: Deploy to staging
 run: |
 echo " Deploying to staging environment..."
 # Add your staging deployment commands here
 # Examples:
 # - kubectl apply -f k8s/staging/
 # - helm upgrade --install real-time-translator ./helm-chart
 # - ansible-playbook -i inventory/staging deploy.yml
 echo "[PASS] Staging deployment completed"

 # Production Deployment
 deploy-production:
 name: Deploy to Production
 runs-on: ubuntu-latest
 needs: [load-test, deploy-staging]
 if: github.event_name == 'release' && github.event.action == 'published'
 environment: production
 
 steps:
 - name: Checkout Code
 uses: actions/checkout@v4
 
 - name: Deploy to production
 run: |
 echo " Deploying to production environment..."
 # Add your production deployment commands here
 echo "[PASS] Production deployment completed"
 
 - name: Notify deployment success
 if: success()
 run: |
 echo " Production deployment successful!"
 # Add notification logic (Slack, email, etc.)
 
 - name: Notify deployment failure
 if: failure()
 run: |
 echo "[FAIL] Production deployment failed!"
 # Add failure notification logic

 # Performance Monitoring
 performance-monitoring:
 name: Performance Monitoring
 runs-on: ubuntu-latest
 needs: deploy-production
 if: github.event_name == 'release' && github.event.action == 'published'
 
 steps:
 - name: Setup monitoring
 run: |
 echo " Setting up performance monitoring..."
 # Add performance monitoring setup
 echo "[PASS] Monitoring configured"
